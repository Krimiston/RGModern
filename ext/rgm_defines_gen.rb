# zlib License
#
# copyright (C) 2023 Guoxiaomi and Krimiston
#
# This software is provided 'as-is', without any express or implied
# warranty.  In no event will the authors be held liable for any damages
# arising from the use of this software.
#
# Permission is granted to anyone to use this software for any purpose,
# including commercial applications, and to alter it and redistribute it
# freely, subject to the following restrictions:
#
# 1. The origin of this software must not be misrepresented; you must not
#    claim that you wrote the original software. If you use this software
#    in a product, an acknowledgment in the product documentation would be
#    appreciated but is not required.
# 2. Altered source versions must be plainly marked as such, and must not be
#    misrepresented as being the original software.
# 3. This notice may not be removed or altered from any source distribution.

# 此文件是自动生成的，只用于提示 RGM 模块下有哪些函数，没有真正用到。

Pattern_1 = /rb_define_module_function\((.+?)\);/m
Pattern_2 = /static VALUE (.+?)\((.+?)\)/m
Pattern_3 = /struct\s+(\S+)\s+\{([\s\S]+?)void/m
Pattern_4 = /RGMBIND2*\((.+?)\);/m
Pattern_5 = /rb_mRGM_Config.+?rb_intern\((.+?)\)/m

All_Structs = {}

def load_struct(contents)
  contents.scan(Pattern_3).each do |result|
    name = result[0]
    args = result[1].split(';').collect do |a|
      b = a.split.last
    end
    All_Structs[name] = args.compact
  end
end

def load_wrapper_functions(contents)
  data = {}
  contents.scan(Pattern_2).each do |result|
    name = result[0]
    args = result[1].split(',').collect do |a|
      b = a.strip
      b[6...b.size - 1]
    end
    data[name] = args.compact
  end
  data
end

All_Functions = { base: [], ext: [] }

def load_module_function(fn)
  contents = File.read(fn)
  functions = load_wrapper_functions(contents)

  contents.scan(Pattern_1).each do |result|
    module_name, method_name, function_name, arity = result[0].split(',')

    module_name = module_name.split('_').last.downcase.to_sym
    method_name = method_name.gsub('"', '').strip
    function_name = function_name.strip.split('::').last
    arity = arity.to_i

    next unless All_Functions.keys.include?(module_name)
    next if method_name.include?('.')

    args = functions[function_name]
    All_Functions[module_name].push([method_name, args]) if args
  end
end

def load_rgm_bind_function(fn)
  contents = File.read(fn)
  contents.scan(Pattern_4).each do |result|
    module_name, method_name, function_name, arity = result[0].split(',')

    module_name = module_name.split('_').last.downcase.to_sym
    method_name = method_name.gsub('"', '').strip
    function_name = function_name.strip.split('::').last
    arity = arity.to_i

    args = All_Structs[function_name]
    next unless args

    args = args[(args.size - arity)...args.size]
    All_Functions[module_name].push([method_name, args])
  end
end

All_Config = []

def load_rgm_configs(fn)
  contents = File.read(fn)
  contents.scan(Pattern_5).each do |result|
    All_Config.push(result[0].gsub('"', ''))
  end
end

Dir.glob('./src/*/*.hpp') do |fn|
  contents = File.read(fn)
  load_struct(contents)
end

Dir.glob('./src/*/*.hpp') do |fn|
  load_module_function(fn)
  load_rgm_bind_function(fn)
end

load_rgm_configs('./src/base/init_ruby.hpp')

results = <<~HEADER
  # --------------------------------------------------------------------
  # This file was automatically generated by `ext/rgm_defines_gen.rb`
  # --------------------------------------------------------------------
  # 本文件仅用于展示 RGM 内置函数和常量，请不要 load 此文件。
  # --------------------------------------------------------------------
HEADER

results << "module RGM\n"

All_Functions.each_pair do |key, value|
  results << "\n" if All_Functions.first[0] != key
  key = key.to_s.capitalize
  results << "  module #{key}\n"
  value.sort.each do |name, args|
    results << "    def #{name}(#{args.join(', ')}); end\n"
  end
  results << "  end\n"
end
results << "\n  module Config\n"
All_Config.sort.each do |name|
  results << "    #{name}\n"
end
results << "  end\n"
results << "end\n"
puts results
